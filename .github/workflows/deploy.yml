name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

jobs:
  wait-for-spacelift:
    runs-on: ubuntu-latest

    permissions:
      checks: read

    steps:
      - name: Wait for Spacelift status checks
        uses: poseidon/wait-for-status-checks@v0.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          timeout: 10

  build:
    needs: wait-for-spacelift
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [ discovery ] # List all your services here

    permissions:
      contents: read
      id-token: write

    outputs:
      docker_repository: ${{ steps.spacelift.outputs.docker_repository }}
      gcp_project_id: ${{ steps.spacelift.outputs.gcp_project_id }}
      gcp_region: ${{ steps.spacelift.outputs.gcp_region }}
      discovery_run_service_account: ${{ steps.spacelift.outputs.discovery_run_service_account }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Retrieve Spacelift Stack Outputs
        id: spacelift
        uses: ./.github/actions/spacelift-outputs
        with:
          spacelift_stack_id: ${{ secrets.SPACELIFT_STACK_ID }}
          spacelift_key_id: ${{ secrets.SPACELIFT_API_KEY_ID }}
          spacelift_key_secret: ${{ secrets.SPACELIFT_API_KEY }}

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          project_id: ${{ steps.spacelift.outputs.gcp_project_id }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Login to GAR
        id: login_to_gar
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.spacelift.outputs.gcp_region }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.spacelift.outputs.docker_repository }}/${{ matrix.service }}
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker Build and push
        id: docker
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [ discovery ] # List all your services here

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ needs.build.outputs.gcp_project_id }}
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set variables
        run: |
          echo "GIT_SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV


      - name: Deploy services to cloud run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ matrix.service }}
          platform: managed
          env_vars: |
            GPC_PROJECT_ID=${{ needs.build.outputs.gcp_project_id }}
            GCP_REGION=${{ needs.build.outputs.gcp_region }}
          image: ${{ needs.build.outputs.docker_repository }}/${{ matrix.service }}:${{ env.GIT_SHORT_SHA }}
          flags: '--no-allow-unauthenticated'
          project_id: ${{ needs.build.outputs.gcp_project_id }}
          region: ${{ needs.build.outputs.gcp_region }}


